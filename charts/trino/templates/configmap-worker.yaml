{{- if gt (int .Values.server.workers) 0 }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "trino.worker" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: worker
data:
  node.properties: |
    node.environment={{ .Values.server.node.environment }}
    node.data-dir={{ .Values.server.node.dataDir }}
    plugin.dir={{ .Values.server.node.pluginDir }}
  {{- range $configValue := .Values.additionalNodeProperties }}
    {{ $configValue }}
  {{- end }}

  jvm.config: |
    -server
    -Xmx{{ .Values.worker.jvm.maxHeapSize }}
    -XX:+{{ .Values.worker.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.worker.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    -XX:-UseBiasedLocking
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.nio.maxCachedBufferSize=2000000
    -XX:+UnlockDiagnosticVMOptions
    -XX:+UseAESCTRIntrinsics
  {{- range $configValue := .Values.worker.additionalJVMConfig }}
    {{ $configValue }}
  {{- end }}

  config.properties: |
    coordinator=false
    http-server.http.port={{ .Values.service.port }}
    shutdown.grace-period={{ .Values.server.config.shutdownGracePeriodSecs }}s
    query.max-memory={{ .Values.server.config.query.maxMemory }}
    query.max-memory-per-node={{ .Values.server.config.query.maxMemoryPerNode }}
    memory.heap-headroom-per-node={{ .Values.server.config.memory.heapHeadroomPerNode }}
    discovery.uri=http://{{ template "trino.fullname" . }}:{{ .Values.service.port }}
    retry-policy={{ .Values.server.config.retryPolicy }}
  {{- range $configValue := .Values.additionalConfigProperties }}
    {{ $configValue }}
  {{- end }}
  {{- range $configValue := .Values.server.workerExtraConfigs }}
    {{ $configValue }}
  {{- end }}

  shutdown-worker.sh: |
    #!/usr/bin/env bash
    
    set -e
    set -x
    
    SHUTDOWN_URL="http://localhost:{{ .Values.service.port }}/v1/info/state"
    http_code=$(curl -v -X PUT -d '"SHUTTING_DOWN"' -H "Content-type: application/json" -H "X-Trino-User: trino-worker" $SHUTDOWN_URL --write-out '%{http_code}')
    
    if [ $http_code -ne 200 ]
    then
      exit 1
    fi
    
    #trino-worker container waits for 2x grace-periods
    #for details, refer https://trino.io/docs/current/admin/graceful-shutdown.html
    sleep $((2*{{.Values.server.config.shutdownGracePeriodSecs}}))  

{{ if ne .Values.server.config.retryPolicy "NONE" }}
  exchange-manager.properties: |
    exchange-manager.name={{ .Values.server.exchangeManager.name }}
    exchange.base-directory={{ .Values.server.exchangeManager.baseDir }}
  {{- range $configValue := .Values.additionalExchangeManagerProperties }}
    {{ $configValue }}
  {{- end }}
{{- end }}

  log.properties: |
    io.trino={{ .Values.server.log.trino.level }}
  {{- range $configValue := .Values.additionalLogProperties }}
    {{ $configValue }}
  {{- end }}

{{ if .Values.eventListenerProperties }}
  event-listener.properties: |
  {{- range $configValue := .Values.eventListenerProperties }}
    {{ $configValue }}
  {{- end }}
{{ end }}

{{- end }}
